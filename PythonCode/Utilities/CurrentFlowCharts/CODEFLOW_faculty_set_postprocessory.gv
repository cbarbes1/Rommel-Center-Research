digraph G {
concentrate=true;
splines="ortho";
rankdir="LR";
subgraph legend{
    rank = min;
    label = "legend";
    Legend [shape=none, margin=0, label = <
        <table cellspacing="0" cellpadding="0" border="1"><tr><td>Code2flow Legend</td></tr><tr><td>
        <table cellspacing="0">
        <tr><td>Regular function</td><td width="50px" bgcolor='#cccccc'></td></tr>
        <tr><td>Trunk function (nothing calls this)</td><td bgcolor='#966F33'></td></tr>
        <tr><td>Leaf function (this calls nothing else)</td><td bgcolor='#6db33f'></td></tr>
        <tr><td>Function call</td><td><font color='black'>&#8594;</font></td></tr>
        </table></td></tr></table>
        >];
}node_c6fceacc [label="6: __init__()" name="faculty_set_postprocessor::FacultyPostprocessor.__init__" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_9f25cb83 [label="70: duplicate_postprocessor()" name="faculty_set_postprocessor::FacultyPostprocessor.duplicate_postprocessor" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_04277e59 [label="15: extract_faculty_sets()" name="faculty_set_postprocessor::FacultyPostprocessor.extract_faculty_sets" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_3361033b [label="60: remove_near_duplicates()" name="faculty_set_postprocessor::FacultyPostprocessor.remove_near_duplicates" shape="rect" style="rounded,filled" fillcolor="#966F33" ];
node_e06067f8 [label="104: __init__()" name="faculty_set_postprocessor::MinHashUtility.__init__" shape="rect" style="rounded,filled" fillcolor="#cccccc" ];
node_aca088c5 [label="170: compare_signatures()" name="faculty_set_postprocessor::MinHashUtility.compare_signatures" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_e7cab92d [label="148: compute_signature()" name="faculty_set_postprocessor::MinHashUtility.compute_signature" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_43695f15 [label="126: generate_hash_functions()" name="faculty_set_postprocessor::MinHashUtility.generate_hash_functions" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_95a60ca6 [label="109: tokenize()" name="faculty_set_postprocessor::MinHashUtility.tokenize" shape="rect" style="rounded,filled" fillcolor="#6db33f" ];
node_c6fceacc -> node_e06067f8 [color="#F0E442" penwidth="2"];
node_9f25cb83 -> node_aca088c5 [color="#009E73" penwidth="2"];
node_9f25cb83 -> node_e7cab92d [color="#009E73" penwidth="2"];
node_9f25cb83 -> node_95a60ca6 [color="#009E73" penwidth="2"];
node_3361033b -> node_9f25cb83 [color="#009E73" penwidth="2"];
node_3361033b -> node_04277e59 [color="#009E73" penwidth="2"];
node_e06067f8 -> node_43695f15 [color="#000000" penwidth="2"];
subgraph cluster_d5532c2d {
    label="File: faculty_set_postprocessor";
    name="faculty_set_postprocessor";
    style="filled";
    graph[style=dotted];
    subgraph cluster_5c7cf9ca {
        node_c6fceacc node_04277e59 node_3361033b node_9f25cb83;
        label="Class: FacultyPostprocessor";
        name="FacultyPostprocessor";
        style="filled";
        graph[style=dotted];
    };
    subgraph cluster_e0281e33 {
        node_e06067f8 node_95a60ca6 node_43695f15 node_e7cab92d node_aca088c5;
        label="Class: MinHashUtility";
        name="MinHashUtility";
        style="filled";
        graph[style=dotted];
    };
};
}
